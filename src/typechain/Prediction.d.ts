/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PredictionInterface extends ethers.utils.Interface {
  functions: {
    "INVERSE_BASIS_POINT()": FunctionFragment;
    "MAX_CREATOR_FEE()": FunctionFragment;
    "SERVICE_FEE()": FunctionFragment;
    "additionalRewardEvent(uint256,uint256)": FunctionFragment;
    "cancelEvent(uint256)": FunctionFragment;
    "conditionalToken()": FunctionFragment;
    "createEvent(bytes)": FunctionFragment;
    "eventDetail(uint256)": FunctionFragment;
    "extraReward(address)": FunctionFragment;
    "informationMarket()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "metaspacecyAccessControls()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "paused()": FunctionFragment;
    "predictEvent(uint256,uint256,uint256)": FunctionFragment;
    "redeemEvent(uint256,uint256,uint256)": FunctionFragment;
    "resolveEvent(uint256,uint256[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalEvent()": FunctionFragment;
    "typeId()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "INVERSE_BASIS_POINT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CREATOR_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SERVICE_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "additionalRewardEvent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelEvent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "conditionalToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eventDetail",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "extraReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "informationMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "metaspacecyAccessControls",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "predictEvent",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemEvent",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveEvent",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEvent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "typeId", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "INVERSE_BASIS_POINT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CREATOR_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SERVICE_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "additionalRewardEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conditionalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eventDetail",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extraReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "informationMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "metaspacecyAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "predictEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalEvent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "typeId", data: BytesLike): Result;

  events: {
    "AdditionalRewardEvent(uint256,uint256)": EventFragment;
    "CancelEvent(address,uint256)": EventFragment;
    "CreatedEvent(uint256,address,string,string[],address,uint256,uint256,uint256,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PredictedEvent(address,uint256,uint256,uint256)": EventFragment;
    "RedeemEvent(address,uint256,uint256,uint256)": EventFragment;
    "ResolvedEvent(uint256,address,uint256[],uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdditionalRewardEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PredictedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResolvedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class Prediction extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PredictionInterface;

  functions: {
    INVERSE_BASIS_POINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "INVERSE_BASIS_POINT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_CREATOR_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_CREATOR_FEE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SERVICE_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SERVICE_FEE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    additionalRewardEvent(
      _eventId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "additionalRewardEvent(uint256,uint256)"(
      _eventId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelEvent(
      _eventId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelEvent(uint256)"(
      _eventId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    conditionalToken(overrides?: CallOverrides): Promise<[string]>;

    "conditionalToken()"(overrides?: CallOverrides): Promise<[string]>;

    createEvent(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createEvent(bytes)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    eventDetail(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string[],
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[]
        ] & {
          description: string;
          options: string[];
          creator: string;
          paymentToken: string;
          reward: BigNumber;
          creatorFee: BigNumber;
          startTime: BigNumber;
          endTime: BigNumber;
          payoutTime: BigNumber;
          outcomes: BigNumber[];
        }
      ] & {
        _event: [
          string,
          string[],
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[]
        ] & {
          description: string;
          options: string[];
          creator: string;
          paymentToken: string;
          reward: BigNumber;
          creatorFee: BigNumber;
          startTime: BigNumber;
          endTime: BigNumber;
          payoutTime: BigNumber;
          outcomes: BigNumber[];
        };
      }
    >;

    "eventDetail(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string[],
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[]
        ] & {
          description: string;
          options: string[];
          creator: string;
          paymentToken: string;
          reward: BigNumber;
          creatorFee: BigNumber;
          startTime: BigNumber;
          endTime: BigNumber;
          payoutTime: BigNumber;
          outcomes: BigNumber[];
        }
      ] & {
        _event: [
          string,
          string[],
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[]
        ] & {
          description: string;
          options: string[];
          creator: string;
          paymentToken: string;
          reward: BigNumber;
          creatorFee: BigNumber;
          startTime: BigNumber;
          endTime: BigNumber;
          payoutTime: BigNumber;
          outcomes: BigNumber[];
        };
      }
    >;

    extraReward(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "extraReward(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    informationMarket(overrides?: CallOverrides): Promise<[string]>;

    "informationMarket()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _informationMarket: string,
      _conditionalToken: string,
      _accessControl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _informationMarket: string,
      _conditionalToken: string,
      _accessControl: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    metaspacecyAccessControls(overrides?: CallOverrides): Promise<[string]>;

    "metaspacecyAccessControls()"(overrides?: CallOverrides): Promise<[string]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    predictEvent(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "predictEvent(uint256,uint256,uint256)"(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    redeemEvent(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemEvent(uint256,uint256,uint256)"(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    resolveEvent(
      _eventId: BigNumberish,
      _outcomes: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "resolveEvent(uint256,uint256[])"(
      _eventId: BigNumberish,
      _outcomes: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalEvent(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    "totalEvent()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    typeId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "typeId()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  INVERSE_BASIS_POINT(overrides?: CallOverrides): Promise<BigNumber>;

  "INVERSE_BASIS_POINT()"(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_CREATOR_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_CREATOR_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

  SERVICE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  "SERVICE_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

  additionalRewardEvent(
    _eventId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "additionalRewardEvent(uint256,uint256)"(
    _eventId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelEvent(
    _eventId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelEvent(uint256)"(
    _eventId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  conditionalToken(overrides?: CallOverrides): Promise<string>;

  "conditionalToken()"(overrides?: CallOverrides): Promise<string>;

  createEvent(
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createEvent(bytes)"(
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  eventDetail(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string[],
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      description: string;
      options: string[];
      creator: string;
      paymentToken: string;
      reward: BigNumber;
      creatorFee: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      payoutTime: BigNumber;
      outcomes: BigNumber[];
    }
  >;

  "eventDetail(uint256)"(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string[],
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber[]
    ] & {
      description: string;
      options: string[];
      creator: string;
      paymentToken: string;
      reward: BigNumber;
      creatorFee: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      payoutTime: BigNumber;
      outcomes: BigNumber[];
    }
  >;

  extraReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "extraReward(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  informationMarket(overrides?: CallOverrides): Promise<string>;

  "informationMarket()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _informationMarket: string,
    _conditionalToken: string,
    _accessControl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _informationMarket: string,
    _conditionalToken: string,
    _accessControl: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  metaspacecyAccessControls(overrides?: CallOverrides): Promise<string>;

  "metaspacecyAccessControls()"(overrides?: CallOverrides): Promise<string>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onERC1155Received(address,address,uint256,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  predictEvent(
    _eventId: BigNumberish,
    _option: BigNumberish,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "predictEvent(uint256,uint256,uint256)"(
    _eventId: BigNumberish,
    _option: BigNumberish,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  redeemEvent(
    _eventId: BigNumberish,
    _option: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemEvent(uint256,uint256,uint256)"(
    _eventId: BigNumberish,
    _option: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  resolveEvent(
    _eventId: BigNumberish,
    _outcomes: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "resolveEvent(uint256,uint256[])"(
    _eventId: BigNumberish,
    _outcomes: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalEvent(overrides?: CallOverrides): Promise<BigNumber>;

  "totalEvent()"(overrides?: CallOverrides): Promise<BigNumber>;

  typeId(overrides?: CallOverrides): Promise<BigNumber>;

  "typeId()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    INVERSE_BASIS_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    "INVERSE_BASIS_POINT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CREATOR_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_CREATOR_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SERVICE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "SERVICE_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    additionalRewardEvent(
      _eventId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "additionalRewardEvent(uint256,uint256)"(
      _eventId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelEvent(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelEvent(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    conditionalToken(overrides?: CallOverrides): Promise<string>;

    "conditionalToken()"(overrides?: CallOverrides): Promise<string>;

    createEvent(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    "createEvent(bytes)"(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    eventDetail(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string[],
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        description: string;
        options: string[];
        creator: string;
        paymentToken: string;
        reward: BigNumber;
        creatorFee: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        payoutTime: BigNumber;
        outcomes: BigNumber[];
      }
    >;

    "eventDetail(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string[],
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[]
      ] & {
        description: string;
        options: string[];
        creator: string;
        paymentToken: string;
        reward: BigNumber;
        creatorFee: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        payoutTime: BigNumber;
        outcomes: BigNumber[];
      }
    >;

    extraReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "extraReward(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    informationMarket(overrides?: CallOverrides): Promise<string>;

    "informationMarket()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _informationMarket: string,
      _conditionalToken: string,
      _accessControl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _informationMarket: string,
      _conditionalToken: string,
      _accessControl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    metaspacecyAccessControls(overrides?: CallOverrides): Promise<string>;

    "metaspacecyAccessControls()"(overrides?: CallOverrides): Promise<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    predictEvent(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "predictEvent(uint256,uint256,uint256)"(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemEvent(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeemEvent(uint256,uint256,uint256)"(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveEvent(
      _eventId: BigNumberish,
      _outcomes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "resolveEvent(uint256,uint256[])"(
      _eventId: BigNumberish,
      _outcomes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalEvent(overrides?: CallOverrides): Promise<BigNumber>;

    "totalEvent()"(overrides?: CallOverrides): Promise<BigNumber>;

    typeId(overrides?: CallOverrides): Promise<BigNumber>;

    "typeId()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    AdditionalRewardEvent(
      eventId: BigNumberish | null,
      amount: null
    ): EventFilter;

    CancelEvent(creator: string | null, eventId: null): EventFilter;

    CreatedEvent(
      eventId: BigNumberish | null,
      creator: string | null,
      description: null,
      _options: null,
      paymentToken: null,
      creatorFee: null,
      startTime: null,
      endTime: null,
      payoutTime: null
    ): EventFilter;

    Paused(account: null): EventFilter;

    PredictedEvent(
      predictor: string | null,
      eventId: BigNumberish | null,
      option: BigNumberish | null,
      amount: null
    ): EventFilter;

    RedeemEvent(
      predictor: string | null,
      eventId: BigNumberish | null,
      option: BigNumberish | null,
      reward: null
    ): EventFilter;

    ResolvedEvent(
      eventId: BigNumberish | null,
      creator: null,
      outcomes: null,
      creatorFee: null
    ): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    INVERSE_BASIS_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    "INVERSE_BASIS_POINT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_CREATOR_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_CREATOR_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SERVICE_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "SERVICE_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    additionalRewardEvent(
      _eventId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "additionalRewardEvent(uint256,uint256)"(
      _eventId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelEvent(
      _eventId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelEvent(uint256)"(
      _eventId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    conditionalToken(overrides?: CallOverrides): Promise<BigNumber>;

    "conditionalToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    createEvent(data: BytesLike, overrides?: Overrides): Promise<BigNumber>;

    "createEvent(bytes)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    eventDetail(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "eventDetail(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extraReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "extraReward(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    informationMarket(overrides?: CallOverrides): Promise<BigNumber>;

    "informationMarket()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _informationMarket: string,
      _conditionalToken: string,
      _accessControl: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _informationMarket: string,
      _conditionalToken: string,
      _accessControl: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    metaspacecyAccessControls(overrides?: CallOverrides): Promise<BigNumber>;

    "metaspacecyAccessControls()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    predictEvent(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "predictEvent(uint256,uint256,uint256)"(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    redeemEvent(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemEvent(uint256,uint256,uint256)"(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    resolveEvent(
      _eventId: BigNumberish,
      _outcomes: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "resolveEvent(uint256,uint256[])"(
      _eventId: BigNumberish,
      _outcomes: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalEvent(overrides?: CallOverrides): Promise<BigNumber>;

    "totalEvent()"(overrides?: CallOverrides): Promise<BigNumber>;

    typeId(overrides?: CallOverrides): Promise<BigNumber>;

    "typeId()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    INVERSE_BASIS_POINT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "INVERSE_BASIS_POINT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_CREATOR_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_CREATOR_FEE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SERVICE_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SERVICE_FEE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    additionalRewardEvent(
      _eventId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "additionalRewardEvent(uint256,uint256)"(
      _eventId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelEvent(
      _eventId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelEvent(uint256)"(
      _eventId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    conditionalToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "conditionalToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createEvent(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createEvent(bytes)"(
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    eventDetail(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "eventDetail(uint256)"(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extraReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extraReward(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    informationMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "informationMarket()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _informationMarket: string,
      _conditionalToken: string,
      _accessControl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _informationMarket: string,
      _conditionalToken: string,
      _accessControl: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    metaspacecyAccessControls(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "metaspacecyAccessControls()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onERC1155Received(address,address,uint256,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    predictEvent(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "predictEvent(uint256,uint256,uint256)"(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    redeemEvent(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemEvent(uint256,uint256,uint256)"(
      _eventId: BigNumberish,
      _option: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    resolveEvent(
      _eventId: BigNumberish,
      _outcomes: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "resolveEvent(uint256,uint256[])"(
      _eventId: BigNumberish,
      _outcomes: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalEvent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalEvent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    typeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "typeId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
