/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface InformationMarketInterface extends ethers.utils.Interface {
  functions: {
    "addEventType(address)": FunctionFragment;
    "createEvent(uint256,bytes)": FunctionFragment;
    "getBeneficiary()": FunctionFragment;
    "getEntryFee()": FunctionFragment;
    "getEventTypeInfo(uint256)": FunctionFragment;
    "getServiceFee()": FunctionFragment;
    "marketFee()": FunctionFragment;
    "metaspacecyAccessControls()": FunctionFragment;
    "pauseIM()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeEventType(uint256)": FunctionFragment;
    "replaceEventType(uint256,address)": FunctionFragment;
    "setBeneficiary(address)": FunctionFragment;
    "setEntryFee(uint256)": FunctionFragment;
    "setServiceFee(uint256)": FunctionFragment;
    "unpauseIM()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addEventType",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEventTypeInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getServiceFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "marketFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "metaspacecyAccessControls",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pauseIM", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeEventType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceEventType",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntryFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpauseIM", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addEventType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventTypeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getServiceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "metaspacecyAccessControls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseIM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeEventType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceEventType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEntryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpauseIM", data: BytesLike): Result;

  events: {
    "EventTypeAdded(address,uint256)": EventFragment;
    "EventTypeRemoved(address,uint256)": EventFragment;
    "EventTypeReplaced(address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventTypeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventTypeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EventTypeReplaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class InformationMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: InformationMarketInterface;

  functions: {
    addEventType(
      eventType: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addEventType(address)"(
      eventType: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createEvent(
      typeId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "createEvent(uint256,bytes)"(
      typeId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getBeneficiary(overrides?: CallOverrides): Promise<[string]>;

    "getBeneficiary()"(overrides?: CallOverrides): Promise<[string]>;

    getEntryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getEntryFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEventTypeInfo(
      eventType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    "getEventTypeInfo(uint256)"(
      eventType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    getServiceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getServiceFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        entryFee: BigNumber;
        serviceFee: BigNumber;
        beneficiary: string;
      }
    >;

    "marketFee()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        entryFee: BigNumber;
        serviceFee: BigNumber;
        beneficiary: string;
      }
    >;

    metaspacecyAccessControls(overrides?: CallOverrides): Promise<[string]>;

    "metaspacecyAccessControls()"(overrides?: CallOverrides): Promise<[string]>;

    pauseIM(overrides?: Overrides): Promise<ContractTransaction>;

    "pauseIM()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    removeEventType(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeEventType(uint256)"(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    replaceEventType(
      typeId: BigNumberish,
      eventType: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "replaceEventType(uint256,address)"(
      typeId: BigNumberish,
      eventType: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBeneficiary(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBeneficiary(address)"(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEntryFee(
      entryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEntryFee(uint256)"(
      entryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setServiceFee(
      serviceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setServiceFee(uint256)"(
      serviceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpauseIM(overrides?: Overrides): Promise<ContractTransaction>;

    "unpauseIM()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  addEventType(
    eventType: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addEventType(address)"(
    eventType: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createEvent(
    typeId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "createEvent(uint256,bytes)"(
    typeId: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getBeneficiary(overrides?: CallOverrides): Promise<string>;

  "getBeneficiary()"(overrides?: CallOverrides): Promise<string>;

  getEntryFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getEntryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEventTypeInfo(
    eventType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getEventTypeInfo(uint256)"(
    eventType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getServiceFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getServiceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  marketFee(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      entryFee: BigNumber;
      serviceFee: BigNumber;
      beneficiary: string;
    }
  >;

  "marketFee()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      entryFee: BigNumber;
      serviceFee: BigNumber;
      beneficiary: string;
    }
  >;

  metaspacecyAccessControls(overrides?: CallOverrides): Promise<string>;

  "metaspacecyAccessControls()"(overrides?: CallOverrides): Promise<string>;

  pauseIM(overrides?: Overrides): Promise<ContractTransaction>;

  "pauseIM()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  removeEventType(
    typeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeEventType(uint256)"(
    typeId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  replaceEventType(
    typeId: BigNumberish,
    eventType: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "replaceEventType(uint256,address)"(
    typeId: BigNumberish,
    eventType: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBeneficiary(
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBeneficiary(address)"(
    beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEntryFee(
    entryFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEntryFee(uint256)"(
    entryFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setServiceFee(
    serviceFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setServiceFee(uint256)"(
    serviceFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpauseIM(overrides?: Overrides): Promise<ContractTransaction>;

  "unpauseIM()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    addEventType(eventType: string, overrides?: CallOverrides): Promise<void>;

    "addEventType(address)"(
      eventType: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createEvent(
      typeId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "createEvent(uint256,bytes)"(
      typeId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getBeneficiary(overrides?: CallOverrides): Promise<string>;

    "getBeneficiary()"(overrides?: CallOverrides): Promise<string>;

    getEntryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getEntryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEventTypeInfo(
      eventType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getEventTypeInfo(uint256)"(
      eventType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getServiceFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getServiceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        entryFee: BigNumber;
        serviceFee: BigNumber;
        beneficiary: string;
      }
    >;

    "marketFee()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        entryFee: BigNumber;
        serviceFee: BigNumber;
        beneficiary: string;
      }
    >;

    metaspacecyAccessControls(overrides?: CallOverrides): Promise<string>;

    "metaspacecyAccessControls()"(overrides?: CallOverrides): Promise<string>;

    pauseIM(overrides?: CallOverrides): Promise<void>;

    "pauseIM()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    removeEventType(
      typeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeEventType(uint256)"(
      typeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceEventType(
      typeId: BigNumberish,
      eventType: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "replaceEventType(uint256,address)"(
      typeId: BigNumberish,
      eventType: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBeneficiary(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBeneficiary(address)"(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEntryFee(
      entryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEntryFee(uint256)"(
      entryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setServiceFee(
      serviceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setServiceFee(uint256)"(
      serviceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseIM(overrides?: CallOverrides): Promise<void>;

    "unpauseIM()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    EventTypeAdded(eventType: null, typeId: null): EventFilter;

    EventTypeRemoved(eventType: null, typeId: null): EventFilter;

    EventTypeReplaced(eventType: null, typeId: null): EventFilter;

    Paused(account: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    addEventType(eventType: string, overrides?: Overrides): Promise<BigNumber>;

    "addEventType(address)"(
      eventType: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createEvent(
      typeId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "createEvent(uint256,bytes)"(
      typeId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getBeneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    "getBeneficiary()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEntryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getEntryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEventTypeInfo(
      eventType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEventTypeInfo(uint256)"(
      eventType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getServiceFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getServiceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketFee(overrides?: CallOverrides): Promise<BigNumber>;

    "marketFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    metaspacecyAccessControls(overrides?: CallOverrides): Promise<BigNumber>;

    "metaspacecyAccessControls()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseIM(overrides?: Overrides): Promise<BigNumber>;

    "pauseIM()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeEventType(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeEventType(uint256)"(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    replaceEventType(
      typeId: BigNumberish,
      eventType: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "replaceEventType(uint256,address)"(
      typeId: BigNumberish,
      eventType: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBeneficiary(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBeneficiary(address)"(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEntryFee(
      entryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEntryFee(uint256)"(
      entryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setServiceFee(
      serviceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setServiceFee(uint256)"(
      serviceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpauseIM(overrides?: Overrides): Promise<BigNumber>;

    "unpauseIM()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addEventType(
      eventType: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addEventType(address)"(
      eventType: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createEvent(
      typeId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "createEvent(uint256,bytes)"(
      typeId: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getBeneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBeneficiary()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEntryFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEventTypeInfo(
      eventType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEventTypeInfo(uint256)"(
      eventType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getServiceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getServiceFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metaspacecyAccessControls(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "metaspacecyAccessControls()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseIM(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pauseIM()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeEventType(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeEventType(uint256)"(
      typeId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    replaceEventType(
      typeId: BigNumberish,
      eventType: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "replaceEventType(uint256,address)"(
      typeId: BigNumberish,
      eventType: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBeneficiary(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBeneficiary(address)"(
      beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEntryFee(
      entryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEntryFee(uint256)"(
      entryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setServiceFee(
      serviceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setServiceFee(uint256)"(
      serviceFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpauseIM(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpauseIM()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
